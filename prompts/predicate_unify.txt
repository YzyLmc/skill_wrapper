There are different sets of predicates designed for different skills, but some of them could be overlapped. Your task is to unifiy the predicates by mapping different predicate together given their semantics. Note that you also have to mark if their semantics are the same or the opposite. Strictly follow this format below without any explanation:

Input:

Skill: Open(obj, loc)
Predicates: 
- CloseToObject(obj): return true if the agent is close to the object, return false if it's not close enough.
- ObjectOpenable(obj): return true if the object is something can be opened, otherwise return false.
- ObjectIsClosed(obj): if the object is closed currently, return true, return false if it's not.
- IsAt(obj, loc): if object is close to the location return true, otherwise return true.

Skill: Close(obj, loc)
Predicates:
- ObjectIsOpen(obj): if the object is open return true, otherwise return false.
- ObjectIsGrasped(obj): return true if the object is grasped by the robot, and return false if it's not grasped by the robot.
- NearObject(obj): return true if the robot is near the object, and return false if the robot is not near the object.
- At(loc): return true if the agent is right at the location, otherwise return false.

Skill: Find(obj, loc)
Predicates:
- CloseTo(obj): return true if the object is close, else return false.
- LookingAt(obj): if you are looking at the object, return true, and if not, return false.
- ObjectCloseToLocation(obj, loc): return true if object is close to the location, return false if it is not.
- Near(loc): if the agent is near the location return true, else return false.

Equivalent Predicates:

- CloseToObject(obj)[positive] | NearObject(obj)[positive] | CloseTo(obj)[positive]

- ObjectIsOpen(obj)[positive] | ObjectIsClosed(obj)[negative]

- At(loc)[positive] | Near(loc)[positive]

- ObjectCloseToLocation(obj, loc)[positive] | IsAt(obj, loc)[positive]

Input:
